'''This script constructs the n longest contigs for a Debruijn Graph following an example on Github. This example is linked in the README and is not free of errors. '''

from file_tools import  Fasta
from datetime import datetime as dt
from dbg import DebruijnGraph

import sys

# sys.setrecursionlimit(1000000)





def get_reads_from_dir(directory_path) -> list[str]:
    '''
    This function looks for a dir of a specific name in data/inputs. 
    The dir it finds should at the minimum have the following elements.
    
    week1/data/inputs/
        directory_path/
        ├── long.fasta
        ├── short_1.fasta
        └── short_2.fasta
    '''
    reads_list:list[str] = []
    expected_file_names = ["short_1.fasta", "short_2.fasta", "long.fasta"]
    for fasta_file_name in expected_file_names:
        with open(f"{directory_path}/{fasta_file_name}", 'r') as fasta_file:
            fasta_file_content = fasta_file.read()
            reads_list.extend(Fasta.get_fasta_as_list(fasta_file_content))
    return reads_list

def main(data_dir_path):
    # Construct De Bruijn Graph
    strings = get_reads_from_dir(data_dir_path)
    kmer_size = 25
    my_graph = DebruijnGraph(strings, kmer_size)
    num_contigs = 20
    # Write the resulting m longest contigs to the file
    with open(f"{data_dir_path}/contig.fasta", 'w') as output_file:
        try:
            for i in range(num_contigs):
                contig = my_graph.get_longest_contig()
                # print(i, len(contig))
                output_file.write( f">contig_{i}\n{contig}\n")
        finally:
            pass
            # Do nothing but stop writing when you encounter an error with writing.

data_dir_path_arg = sys.argv[1] 
# start = dt.now()
main(data_dir_path_arg)
# end = dt.now()
# print(end-start)
