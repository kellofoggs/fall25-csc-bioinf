# Copyright 2008 by Bartek Wilczynski.  All rights reserved.
# Revisions copyright 2019 by Victor Lin.
# Adapted from test_Mymodule.py by Jeff Chang.
# This file is part of the Biopython distribution and governed by your
# choice of the "Biopython License Agreement" or the "BSD 3-Clause License".
# Please see the LICENSE file that should have been included as part of this
# package.

"""Tests for motifs module."""

import math
# import tempfile
import unittest
import numpy as np

# try:
#     import numpy as np
# except ImportError:
#     from Bio import MissingExternalDependencyError

#     raise MissingExternalDependencyError(
#         "Install numpy if you want to use Bio.motifs."
#     ) from None

import week2.code.motifs as motifs
from python import Bio.Seq as BioSeq
Seq = BioSeq.Seq


class TestBasic(unittest.TestCase):
    """Basic motif tests."""

    def test_format():
        m = motifs.create([Seq("ATATA")])
        m.name = "Foo"
        s1 = format(m, "pfm")
        expected_pfm = """  1.00   0.00   1.00   0.00  1.00
  0.00   0.00   0.00   0.00  0.00
  0.00   0.00   0.00   0.00  0.00
  0.00   1.00   0.00   1.00  0.00
"""
        s2 = format(m, "jaspar")
        expected_jaspar = """>None Foo
A [  1.00   0.00   1.00   0.00   1.00]
C [  0.00   0.00   0.00   0.00   0.00]
G [  0.00   0.00   0.00   0.00   0.00]
T [  0.00   1.00   0.00   1.00   0.00]
"""
        KellyTests.assertEqual(s2, expected_jaspar)
        s3 = format(m, "transfac")
        expected_transfac = """P0      A      C      G      T
01      1      0      0      0      A
02      0      0      0      1      T
03      1      0      0      0      A
04      0      0      0      1      T
05      1      0      0      0      A
XX
//
"""
        KellyTests.assertEqual(s3, expected_transfac)
        KellyTests.assertRaises(ValueError, format, m, "foo_bar")

    def test_relative_entropy():
        m = motifs.create([Seq("ATATA"), Seq("ATCTA"), Seq("TTGTA")])
        KellyTests.assertEqual(len(m.alignment), 3)
        KellyTests.assertEqual(m.background, {"A": 0.25, "C": 0.25, "G": 0.25, "T": 0.25})
        KellyTests.assertEqual(m.pseudocounts, {"A": 0.0, "C": 0.0, "G": 0.0, "T": 0.0})
        KellyTests.assertTrue(
            np.allclose(
                m.relative_entropy,
                np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0]),
            )
        )
        m.background = {"A": 0.3, "C": 0.2, "G": 0.2, "T": 0.3}
        KellyTests.assertTrue(
            np.allclose(
                m.relative_entropy,
                np.array(
                    [
                        0.8186697601117167,
                        1.7369655941662063,
                        0.5419780939258206,
                        1.7369655941662063,
                        1.7369655941662063,
                    ]
                ),
            )
        )
        m.background = None
        KellyTests.assertEqual(m.background, {"A": 0.25, "C": 0.25, "G": 0.25, "T": 0.25})
        pseudocounts = math.sqrt(len(m.alignment))
        m.pseudocounts = {
            letter: m.background[letter] * pseudocounts for letter in "ACGT"
        }
        KellyTests.assertTrue(
            np.allclose(
                m.relative_entropy,
                np.array(
                    [
                        0.3532586861097656,
                        0.7170228827697498,
                        0.11859369972847714,
                        0.7170228827697498,
                        0.7170228827697499,
                    ]
                ),
            )
        )
        m.background = {"A": 0.3, "C": 0.2, "G": 0.2, "T": 0.3}
        KellyTests.assertTrue(
            np.allclose(
                m.relative_entropy,
                np.array(
                    [
                        0.19727984803857979,
                        0.561044044698564,
                        0.20984910512125132,
                        0.561044044698564,
                        0.5610440446985638,
                    ]
                ),
            )
        )

    def test_reverse_complement():
        """Test if motifs can be reverse-complemented."""
        background = {"A": 0.3, "C": 0.2, "G": 0.2, "T": 0.3}
        pseudocounts = 0.5
        m = motifs.create([Seq("ATATA")])
        m.background = background
        m.pseudocounts = pseudocounts
        received_forward = format(m, "transfac")
        expected_forward = """\
P0      A      C      G      T
01      1      0      0      0      A
02      0      0      0      1      T
03      1      0      0      0      A
04      0      0      0      1      T
05      1      0      0      0      A
XX
//
"""
        KellyTests.assertEqual(received_forward, expected_forward)
        expected_forward_pwm = """\
        0      1      2      3      4
A:   0.50   0.17   0.50   0.17   0.50
C:   0.17   0.17   0.17   0.17   0.17
G:   0.17   0.17   0.17   0.17   0.17
T:   0.17   0.50   0.17   0.50   0.17
"""
        KellyTests.assertEqual(str(m.pwm), expected_forward_pwm)
        m = m.reverse_complement()
        received_reverse = format(m, "transfac")
        expected_reverse = """\
P0      A      C      G      T
01      0      0      0      1      T
02      1      0      0      0      A
03      0      0      0      1      T
04      1      0      0      0      A
05      0      0      0      1      T
XX
//
"""
        KellyTests.assertEqual(received_reverse, expected_reverse)
        expected_reverse_pwm = """\
        0      1      2      3      4
A:   0.17   0.50   0.17   0.50   0.17
C:   0.17   0.17   0.17   0.17   0.17
G:   0.17   0.17   0.17   0.17   0.17
T:   0.50   0.17   0.50   0.17   0.50
"""
        KellyTests.assertEqual(str(m.pwm), expected_reverse_pwm)
        # Same but for RNA motif.
        background_rna = {"A": 0.3, "C": 0.2, "G": 0.2, "U": 0.3}
        pseudocounts = 0.5
        m_rna = motifs.create([Seq("AUAUA")], alphabet="ACGU")
        m_rna.background = background_rna
        m_rna.pseudocounts = pseudocounts
        expected_forward_rna_counts = """\
        0      1      2      3      4
A:   1.00   0.00   1.00   0.00   1.00
C:   0.00   0.00   0.00   0.00   0.00
G:   0.00   0.00   0.00   0.00   0.00
U:   0.00   1.00   0.00   1.00   0.00
"""
        KellyTests.assertEqual(str(m_rna.counts), expected_forward_rna_counts)
        expected_forward_rna_pwm = """\
        0      1      2      3      4
A:   0.50   0.17   0.50   0.17   0.50
C:   0.17   0.17   0.17   0.17   0.17
G:   0.17   0.17   0.17   0.17   0.17
U:   0.17   0.50   0.17   0.50   0.17
"""
        KellyTests.assertEqual(str(m_rna.pwm), expected_forward_rna_pwm)
        expected_reverse_rna_counts = """\
        0      1      2      3      4
A:   0.00   1.00   0.00   1.00   0.00
C:   0.00   0.00   0.00   0.00   0.00
G:   0.00   0.00   0.00   0.00   0.00
U:   1.00   0.00   1.00   0.00   1.00
"""
        KellyTests.assertEqual(
            str(m_rna.reverse_complement().counts), expected_reverse_rna_counts
        )
        expected_reverse_rna_pwm = """\
        0      1      2      3      4
A:   0.17   0.50   0.17   0.50   0.17
C:   0.17   0.17   0.17   0.17   0.17
G:   0.17   0.17   0.17   0.17   0.17
U:   0.50   0.17   0.50   0.17   0.50
"""
        KellyTests.assertEqual(str(m_rna.reverse_complement().pwm), expected_reverse_rna_pwm)
        # Same thing, but now start with a motif calculated from a count matrix
        m = motifs.create([Seq("ATATA")])
        counts = m.counts
        m = motifs.Motif(counts=counts)
        m.background = background
        m.pseudocounts = pseudocounts
        received_forward = format(m, "transfac")
        KellyTests.assertEqual(received_forward, expected_forward)
        KellyTests.assertEqual(str(m.pwm), expected_forward_pwm)
        m = m.reverse_complement()
        received_reverse = format(m, "transfac")
        KellyTests.assertEqual(received_reverse, expected_reverse)
        KellyTests.assertEqual(str(m.pwm), expected_reverse_pwm)
        # Same, but for RNA count matrix
        m_rna = motifs.create([Seq("AUAUA")], alphabet="ACGU")
        counts = m_rna.counts
        print(f"COUNTS: \n{type(counts)}, {counts}")
        m_rna = motifs.Motif(counts=counts, alphabet="ACGU")
        m_rna.background = background_rna
        m_rna.pseudocounts = pseudocounts
        KellyTests.assertEqual(str(m_rna.counts), expected_forward_rna_counts)
        KellyTests.assertEqual(str(m_rna.pwm), expected_forward_rna_pwm)
        KellyTests.assertEqual(
            str(m_rna.reverse_complement().counts), expected_reverse_rna_counts
        )
        KellyTests.assertEqual(str(m_rna.reverse_complement().pwm), expected_reverse_rna_pwm)




class KellyTests:
    @test
    def test_minimal_meme_parser():
        """Parse motifs/minimal_test.meme file."""
        with open("motifs/minimal_test.meme") as stream:
            record = motifs.parse(stream, "minimal")
        KellyTests.assertEqual(record.version, "4")
        KellyTests.assertEqual(record.alphabet, "ACGT")
        KellyTests.assertEqual(len(record.sequences), 0)
        KellyTests.assertEqual(record.command, "")
        KellyTests.assertEqual(len(record), 3)
        motif = record[0]
        # print(motif.name)
        KellyTests.assertEqual(motif.name, "KRP")
        # print(record["KRP"])

        KellyTests.assertEqual(record["KRP"], motif, msg="KRP inconsistencies")

        KellyTests.assertEqual(motif.num_occurrences, 17)
        KellyTests.assertEqual(motif.length, 19)
        print(motif.background["A"])
        KellyTests.assertAlmostEqual(motif.background["A"], 0.30269730269730266)
        KellyTests.assertAlmostEqual(motif.background["C"], 0.1828171828171828)
        KellyTests.assertAlmostEqual(motif.background["G"], 0.20879120879120877)
        KellyTests.assertAlmostEqual(motif.background["T"], 0.30569430569430567)

        KellyTests.assertAlmostEqual(motif.evalue, 4.1e-09, places=10)
        KellyTests.assertEqual(motif.alphabet, "ACGT")

        # KellyTests.assertIsNone(motif.alignment)
        KellyTests.assertEqual(motif.consensus, "TGTGATCGAGGTCACACTT")

        KellyTests.assertEqual(motif.degenerate_consensus, "TGTGANNNWGNTCACAYWW")

        KellyTests.assertTrue(
            np.allclose(
                motif.relative_entropy,
                np.array(
                    [
                        1.1684297174927525,
                        0.9432809925744818,
                        1.4307101633876265,
                        1.1549413780465179,
                        0.9308256303218774,
                        0.009164393966550805,
                        0.20124190687894253,
                        0.17618542656995528,
                        0.36777933103380855,
                        0.6635834532368525,
                        0.07729943368061855,
                        0.9838293592717438,
                        1.72489868427398,
                        0.8397561713453014,
                        1.72489868427398,
                        0.8455332015343343,
                        0.3106481207768122,
                        0.7382733641762232,
                        0.537435993300495,
                    ]
                ),
            )
        )

        KellyTests.assertEqual(motif.consensus[2:9], "TGATCGA")
        motif = record[1]
        KellyTests.assertEqual(motif.name, "IFXA")
        KellyTests.assertEqual(record["IFXA"], motif)
        KellyTests.assertEqual(motif.num_occurrences, 14)
        KellyTests.assertEqual(motif.length, 18)
        KellyTests.assertAlmostEqual(motif.background["A"], 0.30269730269730266)
        KellyTests.assertAlmostEqual(motif.background["C"], 0.1828171828171828)
        KellyTests.assertAlmostEqual(motif.background["G"], 0.20879120879120877)
        KellyTests.assertAlmostEqual(motif.background["T"], 0.30569430569430567)
        KellyTests.assertAlmostEqual(motif.evalue, 3.2e-35, places=36)
        KellyTests.assertEqual(motif.alphabet, "ACGT")
        # KellyTests.assertIsNone(motif.alignment)
        KellyTests.assertEqual(motif.consensus, "TACTGTATATATATCCAG")
        KellyTests.assertEqual(motif.degenerate_consensus, "TACTGTATATAHAWMCAG")
        KellyTests.assertTrue(
            np.allclose(
                motif.relative_entropy,
                np.array(
                    [
                        0.9632889858595118,
                        1.02677956765017,
                        2.451526420551951,
                        1.7098384161433415,
                        2.2598671267551107,
                        1.7098384161433415,
                        1.02677956765017,
                        1.391583804103081,
                        1.02677956765017,
                        1.1201961888781142,
                        0.27822438781180836,
                        0.36915366971717867,
                        1.7240522753630425,
                        0.3802185945622609,
                        0.790937683007783,
                        2.451526420551951,
                        1.7240522753630425,
                        1.3924085743645374,
                    ]
                ),
            )
        )
        KellyTests.assertEqual(motif.consensus[2:9], "CTGTATA")
        with open("motifs/minimal_test.meme") as stream:
            record = motifs.parse(stream, "minimal")
        motif = record[2]
        KellyTests.assertEqual(motif.name, "IFXA_no_nsites_no_evalue")
        KellyTests.assertEqual(record["IFXA_no_nsites_no_evalue"], motif)
        KellyTests.assertEqual(motif.num_occurrences, 20)
        KellyTests.assertEqual(motif.length, 18)
        KellyTests.assertAlmostEqual(motif.background["A"], 0.30269730269730266)
        KellyTests.assertAlmostEqual(motif.background["C"], 0.1828171828171828)
        KellyTests.assertAlmostEqual(motif.background["G"], 0.20879120879120877)
        KellyTests.assertAlmostEqual(motif.background["T"], 0.30569430569430567)
        KellyTests.assertAlmostEqual(motif.evalue, 0.0, places=36)
        KellyTests.assertEqual(motif.alphabet, "ACGT")
        # KellyTests.assertIsNone(motif.alignment)
        KellyTests.assertEqual(motif.consensus, "TACTGTATATATATCCAG")
        KellyTests.assertEqual(motif.degenerate_consensus, "TACTGTATATAHAWMCAG")
        KellyTests.assertTrue(
            np.allclose(
                motif.relative_entropy,
                np.array(
                    [
                        0.99075309,
                        1.16078104,
                        2.45152642,
                        1.70983842,
                        2.25986713,
                        1.70983842,
                        1.16078104,
                        1.46052586,
                        1.16078104,
                        1.10213019,
                        0.29911041,
                        0.36915367,
                        1.72405228,
                        0.37696488,
                        0.85258086,
                        2.45152642,
                        1.72405228,
                        1.42793329,
                    ]
                ),
            )
        )
        KellyTests.assertEqual(motif.consensus[2:9], "CTGTATA")

# --- Assertion helpers ---
    def assertEqual(a, b, msg=None):
        if a != b:
            msg= ""
            raise AssertionError(msg)

    def assertAlmostEqual(a, b, places=7, msg=None):
        if round(abs(a - b), places) != 0:
            raise AssertionError(msg or f"{a!r} != {b!r} within {places} places")

    def assertTrue(condition, msg=None):
        if not condition:
            raise AssertionError(msg or f"Condition is not true")

    def assertIsNone(x, msg=None):
        if x is not None:
            raise AssertionError(msg or f"{x!r} is not None")

    @test
    def test_meme_parser_rna():
        """Test if Bio.motifs can parse MEME output files using RNA."""
        with open("motifs/minimal_test_rna.meme") as stream:
            record = motifs.parse(stream, "minimal")
        KellyTests.assertEqual(record.version, "4")
        KellyTests.assertEqual(record.alphabet, "ACGU")
        KellyTests.assertEqual(len(record.sequences), 0)
        KellyTests.assertEqual(record.command, "")
        KellyTests.assertEqual(len(record), 3)
        motif = record[0]
        KellyTests.assertEqual(motif.name, "KRP_fake_RNA")
        KellyTests.assertEqual(record["KRP_fake_RNA"], motif)
        KellyTests.assertEqual(motif.num_occurrences, 17)
        KellyTests.assertEqual(motif.length, 19)
        KellyTests.assertAlmostEqual(motif.background["A"], 0.30269730269730266)
        KellyTests.assertAlmostEqual(motif.background["C"], 0.1828171828171828)
        KellyTests.assertAlmostEqual(motif.background["G"], 0.20879120879120877)
        KellyTests.assertAlmostEqual(motif.background["U"], 0.30569430569430567)
        KellyTests.assertAlmostEqual(motif.evalue, 4.1e-09, places=10)
        KellyTests.assertEqual(motif.alphabet, "ACGU")
        # KellyTests.assertIsNone(motif.alignment)
        KellyTests.assertEqual(motif.consensus, "UGUGAUCGAGGUCACACUU")
        KellyTests.assertEqual(motif.degenerate_consensus, "UGUGANNNWGNUCACAYWW")
        KellyTests.assertTrue(
            np.allclose(
                motif.relative_entropy,
                np.array(
                    [
                        1.1684297174927525,
                        0.9432809925744818,
                        1.4307101633876265,
                        1.1549413780465179,
                        0.9308256303218774,
                        0.009164393966550805,
                        0.20124190687894253,
                        0.17618542656995528,
                        0.36777933103380855,
                        0.6635834532368525,
                        0.07729943368061855,
                        0.9838293592717438,
                        1.72489868427398,
                        0.8397561713453014,
                        1.72489868427398,
                        0.8455332015343343,
                        0.3106481207768122,
                        0.7382733641762232,
                        0.537435993300495,
                    ]
                ),
            )
        )
        KellyTests.assertEqual(motif.consensus[2:9], "UGAUCGA")
        motif = record[1]
        KellyTests.assertEqual(motif.name, "IFXA_fake_RNA")
        KellyTests.assertEqual(record["IFXA_fake_RNA"], motif)
        KellyTests.assertEqual(motif.num_occurrences, 14)
        KellyTests.assertEqual(motif.length, 18)
        KellyTests.assertAlmostEqual(motif.background["A"], 0.30269730269730266)
        KellyTests.assertAlmostEqual(motif.background["C"], 0.1828171828171828)
        KellyTests.assertAlmostEqual(motif.background["G"], 0.20879120879120877)
        KellyTests.assertAlmostEqual(motif.background["U"], 0.30569430569430567)
        KellyTests.assertAlmostEqual(motif.evalue, 3.2e-35, places=36)
        KellyTests.assertEqual(motif.alphabet, "ACGU")
        # KellyTests.assertIsNone(motif.alignment)
        KellyTests.assertEqual(motif.consensus, "UACUGUAUAUAUAUCCAG")
        KellyTests.assertEqual(motif.degenerate_consensus, "UACUGUAUAUAHAWMCAG")
        KellyTests.assertTrue(
            np.allclose(
                motif.relative_entropy,
                np.array(
                    [
                        0.9632889858595118,
                        1.02677956765017,
                        2.451526420551951,
                        1.7098384161433415,
                        2.2598671267551107,
                        1.7098384161433415,
                        1.02677956765017,
                        1.391583804103081,
                        1.02677956765017,
                        1.1201961888781142,
                        0.27822438781180836,
                        0.36915366971717867,
                        1.7240522753630425,
                        0.3802185945622609,
                        0.790937683007783,
                        2.451526420551951,
                        1.7240522753630425,
                        1.3924085743645374,
                    ]
                ),
            )
        )
        KellyTests.assertEqual(motif.consensus[2:9], "CUGUAUA")

        motif = record[2]
        KellyTests.assertEqual(motif.name, "IFXA_no_nsites_no_evalue_fake_RNA")
        KellyTests.assertEqual(record["IFXA_no_nsites_no_evalue_fake_RNA"], motif)
        KellyTests.assertEqual(motif.num_occurrences, 20)
        KellyTests.assertEqual(motif.length, 18)
        KellyTests.assertAlmostEqual(motif.background["A"], 0.30269730269730266)
        KellyTests.assertAlmostEqual(motif.background["C"], 0.1828171828171828)
        KellyTests.assertAlmostEqual(motif.background["G"], 0.20879120879120877)
        KellyTests.assertAlmostEqual(motif.background["U"], 0.30569430569430567)
        KellyTests.assertAlmostEqual(motif.evalue, 0.0, places=36)
        KellyTests.assertEqual(motif.alphabet, "ACGU")
        # KellyTests.assertIsNone(motif.alignment)
        KellyTests.assertEqual(motif.consensus, "UACUGUAUAUAUAUCCAG")
        KellyTests.assertEqual(motif.degenerate_consensus, "UACUGUAUAUAHAWMCAG")
        KellyTests.assertTrue(
            np.allclose(
                motif.relative_entropy,
                np.array(
                    [
                        0.99075309,
                        1.16078104,
                        2.45152642,
                        1.70983842,
                        2.25986713,
                        1.70983842,
                        1.16078104,
                        1.46052586,
                        1.16078104,
                        1.10213019,
                        0.29911041,
                        0.36915367,
                        1.72405228,
                        0.37696488,
                        0.85258086,
                        2.45152642,
                        1.72405228,
                        1.42793329,
                    ]
                ),
            )
        )
        KellyTests.assertEqual(motif.consensus[2:9], "CUGUAUA")


     
     
# if __name__ == "__main__":
    # runner = unittest.TextTestRunner(verbosity=2)
    # runner = unittest
    # unittest.main(testRunner=runner)
    # unittest.main()


@test
def test_format():
        m = motifs.create([Seq("ATATA")])
        m.name = "Foo"
        assert (True)
        s1 = m.format(None)
        expected_pfm = """  1.00   0.00   1.00   0.00  1.00
  0.00   0.00   0.00   0.00  0.00
  0.00   0.00   0.00   0.00  0.00
  0.00   1.00   0.00   1.00  0.00
"""
        # s2 = motifs.format(m, "jaspar")
        expected_jaspar = """>None Foo
A [  1.00   0.00   1.00   0.00   1.00]
C [  0.00   0.00   0.00   0.00   0.00]
G [  0.00   0.00   0.00   0.00   0.00]
T [  0.00   1.00   0.00   1.00   0.00]
"""
        # assertEqual(s2, expected_jaspar)
        # s3 = format(m, "transfac")
        expected_transfac = """P0      A      C      G      T
01      1      0      0      0      A
02      0      0      0      1      T
03      1      0      0      0      A
04      0      0      0      1      T
05      1      0      0      0      A
XX
//
"""

KellyTests.test_minimal_meme_parser()
KellyTests.test_meme_parser_rna()